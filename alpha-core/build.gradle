plugins {
    id 'antlr'
    id 'alpha.java-library-conventions'
}

def antlrVersion = '4.7'
// Keep this in sync with antlr version to avoid multiple versions in classpath
def stringtemplateVersion = "4.0.8"

/* The following configuration directive is a work-around for a fault in the Gradle
 * ANTLR plugin. It would require both antlr4 and antlr4-runtime at compile time and
 * at run time, which unnecessarily bloats our JARs. Only antlr4-runtime is needed.
 * We therefore remove this extension of antlr dependencies being compile dependencies
 * and reintroduce them on our own.
 */
configurations {
    implementation {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {
	api project(":alpha-api") // TODO does it make more sense to use implementation scope?
	api project(":alpha-commons") // TODO does it make more sense to use implementation scope?

    // We need to give the ANTLR Plugin a hint.
    antlr group: 'org.antlr', name: 'antlr4', version: "${antlrVersion}"

    // Re-introduce antlr4-runtime as compile dependency.
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: "${antlrVersion}"
    
    implementation group: 'org.antlr', name: 'ST4', version: '4.0.8'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	implementation group: 'org.apache.commons', name: 'commons-lang3',        version: '3.6'
	implementation group: 'org.apache.commons', name: 'commons-text',         version: '1.8'
}

tasks.withType(AntlrTask) {
	// See https://github.com/antlr/antlr4/blob/master/doc/tool-options.md
	arguments += [
			"-visitor",
			"-no-listener",
			"-long-messages",
			"-package", "at.ac.tuwien.kr.alpha.core.antlr",
			"-Werror",
			"-Xlog",
			"-lib", "src/main/antlr/at/ac/tuwien/kr/alpha/core/antlr"
	]
}

jacocoTestReport {
	reports {
		xml.enabled = true
	}

	// NOTE: Contents of the antlr subpackage are autogenerated (see configuration of
	//       AntlrTasks above). It does not make sense to include them in our coverage
	//       report.
	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "at/ac/tuwien/kr/alpha/antlr/**")
		}))
	}
}

java {
	withSourcesJar()
}

test {
	useJUnitPlatform()
}